---
name: prefect

on:
  push:
    branches: [main]
    paths: ['flows/**/**.py']
  pull_request:
    paths: ['flows/**/**.py']

jobs:
  flow-register:
    runs-on: ubuntu-latest
    env:
      PREFECT__CLOUD__API_KEY: ${{ secrets.PREFECT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        with:
          fetch-depth: 2

      - name: Checkout PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Get changed flows
        id: changed-flows
        uses: tj-actions/changed-files@v1.0.0
        with:
          files: |
            '^flows/\w+/\w+\.py'

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.8
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Create project(s)
        id: create-projects
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run:  |
          project_array=()
          for file in ${{ steps.changed-flows.outputs.all_modified_files }}; do
            dir=${file%/*}
            project=${dir##*/}
            project_array+=($project)
            deduped_project_array=$(tr ' ' '\n' <<< "${project_array[@]}" | sort -u | tr '\n' ' ')
          done
          for project in $deduped_project_array; do
            poetry run prefect create project "$project" --skip-if-exists
          done


      - name: Register development flow(s)
        if: github.event_name == 'pull_request'
        run: |
          for file in ${{ steps.changed-flows.outputs.all_modified_files }}; do
            poetry run prefect register --project development --path "$file" --no-schedule
          done

      - name: Register production flow(s)
        if: steps.create-projects.outcome == 'success'
        run: |
          for file in ${{ steps.changed-flows.outputs.all_modified_files }}; do
            dir=${file%/*}
            project=${dir##*/}
            poetry run prefect register --project "$project" --path "$file"
          done
